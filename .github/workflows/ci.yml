name: ci

on:
  push:
    branches: [main]
    tags: ['v*.*.*'] # релизный прогон при пуше тега vX.Y.Z
  pull_request:

permissions:
  contents: write # создать ветку release/* и публиковать релиз
  packages: read

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  IMAGE_REPO: ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}
jobs:
  ci:
    name: Lint/Build/Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
      - run: npm ci
      - run: npm run lint --if-present
      - run: npm run build
      - run: npm test --if-present

  sync_todos:
    name: Create issues from todos.md
    runs-on: ubuntu-latest
    needs: ci
    # не запускать на тегах
    if: ${{ github.event_name == 'push' && !startsWith(github.ref, 'refs/tags/') }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: 20 }
      - run: npm run todos:md
      - uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const md = fs.readFileSync('todos.md','utf8');
            const idx = md.indexOf('### FIXMEs');
            const todosBlock = idx === -1 ? md : md.slice(0, idx);
            const fixmesBlock = idx === -1 ? '' : md.slice(idx);

            function parse(block){
              const rows=[];
              for(const line of block.split('\n')){
                const m=line.match(/^\|\s*\[([^\]]+)\]\(([^)]+)\)\s*\|\s*(\d+)\s*\|\s*(.+?)\s*\|$/);
                if(m) rows.push({file:m[1], link:m[2], line:m[3], text:m[4].trim().replace(/\s+/g,' ')});
              }
              return rows;
            }
            async function ensureLabel(name,color,desc){
              try{ await github.rest.issues.getLabel({owner:context.repo.owner,repo:context.repo.repo,name}); }
              catch{ await github.rest.issues.createLabel({owner:context.repo.owner,repo:context.repo.repo,name,color,description:desc}); }
            }
            async function findExisting(title){
              const q=`repo:${context.repo.owner}/${context.repo.repo} is:issue in:title "${title}"`;
              const res=await github.rest.search.issuesAndPullRequests({q,per_page:10});
              return res.data.items.find(i=>i.title===title && i.state==='open');
            }
            async function upsert(items, labels, kind){
              for(const it of items){
                const title = `[${kind}] ${it.file}:${it.line} — ${it.text}`.slice(0,250);
                const body = `**Type:** ${kind}\n\n- File: \`${it.file}\` (line ${it.line})\n- Link: ${it.link}\n\n> Extracted automatically from \`todos.md\`.`;
                const existing = await findExisting(title);
                if(existing){
                  await github.rest.issues.update({owner:context.repo.owner,repo:context.repo.repo,issue_number:existing.number,body});
                }else{
                  await github.rest.issues.create({owner:context.repo.owner,repo:context.repo.repo,title,body,labels});
                }
              }
            }

            await ensureLabel('todo','0E8A16','Auto-created from TODOs');
            await ensureLabel('fix','D73A4A','Auto-created from FIXMEs');
            await ensureLabel('bug','B60205','Bug-like');

            await upsert(parse(todosBlock), ['todo'], 'todo');
            await upsert(parse(fixmesBlock), ['fix','bug'], 'fixme');

  docker:
    name: Build & Push Docker (only on tag)
    runs-on: ubuntu-latest
    needs: ci
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v4

      - name: Resolve version
        id: ver
        run: |
          echo "version=${GITHUB_REF_NAME}" >> $GITHUB_OUTPUT
          echo "ref_sha=$(git rev-list -n 1 ${GITHUB_REF_NAME})" >> $GITHUB_OUTPUT

      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3

      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & Push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.IMAGE_REPO }}:${{ steps.ver.outputs.version }}
            ${{ env.IMAGE_REPO }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Create release branch from tag
        uses: actions/github-script@v7
        with:
          script: |
            const tag = process.env.GITHUB_REF_NAME;    // v1.2.3
            const sha = "${{ steps.ver.outputs.ref_sha }}";
            const ref = `refs/heads/release/${tag}`;
            try {
              await github.rest.git.createRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref,
                sha
              });
              core.info(`Created ${ref} at ${sha}`);
            } catch (e) {
              if (e.status === 422) core.info(`Branch ${ref} already exists, skip`);
              else throw e;
            }

  gh_release:
    name: Publish GitHub Release (only on tag)
    runs-on: ubuntu-latest
    needs: [ci, docker]
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v4

      # Автогенерация release notes по истории коммитов/PR
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }} # vX.Y.Z
          name: ${{ github.ref_name }}
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
